"""
An abstract charge, from which subclasses overload.
"""

import abc

from typing import List


class BaseCharge(abc.ABC):
    """
    An abstract charge, from which subclasses overload.
    """

    @abc.abstractmethod
    def electric_field_magnitude(self, point: List[float]) -> float:
        """
        Return the electric field magnitude generated by this charge at a given point.

        Args:
            point (List[float]): x, y location of test point.

        Returns:
            float: magnitude of electric field.
        """

    @abc.abstractmethod
    def electric_field_x(self, point: List[float]) -> float:
        """
        Calculate the x component of the magnetic field generated by the charge at a given point.

        Args:
            point (List[float]): test point to check.

        Returns:
            float: x component of electric field.
        """

    @abc.abstractmethod
    def electric_field_y(self, point: List[float]) -> float:
        """
        Calculate the y component of the magnetic field generated by the charge at a given point.

        Args:
            point (List[float]): test point to check.

        Returns:
            float: y component of electric field.
        """
