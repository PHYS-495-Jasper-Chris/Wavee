"""
Calculate the electric field of a point charge.
"""

from typing import List

import numpy as np

# pylint: disable=import-error
from equations.base_charge import BaseCharge
from equations.constants import COULOMB_CONSTANT
# pylint: enable=import-error


class PointCharge(BaseCharge):
    """
    A single point charge, with a position and a charge.
    """

    def __init__(self, position: List[float], charge: float) -> None:
        self.position = position
        self.charge = charge

    def radius(self, point: List[float]) -> float:
        """
        Returns the radial distance from the given point.

        Args:
            point (List[float]): point to get radial distance from.

        Returns:
            float: radial distance from given point.
        """

        if len(point) != len(self.position):
            raise RuntimeError(
                "Point given does not match dimension of point charge position. point dim: "
                f"{len(point)} | charge dim: {len(self.position)}")

        sides_sum = 0
        for i, point_n in enumerate(point):
            sides_sum += abs(self.position[i] - point_n)**2

        return np.sqrt(sides_sum)

    def electric_field_magnitude(self, point: List[float]) -> float:
        """
        Return the electric field magnitude generated by this point charge at a given point.

        Args:
            point (List[float]): x, y location of test point.

        Returns:
            float: magnitude of electric field.
        """

        return COULOMB_CONSTANT * self.charge / self.radius(point)**2

    def theta(self, point: List[float]) -> float:
        """
        Calculate the angle from point charge location to test point.

        Args:
            point (List[float]): test point.

        Returns:
            float: angle.
        """

        return np.arccos(abs((point[0] - self.position[0])) / self.radius(point))

    def electric_field_x(self, point: List[float]) -> float:
        """
        Calculate the x component of the magnetic field generated by the point charge at a given
        point.

        Args:
            point (List[float]): test point to check.

        Returns:
            float: x component of electric field.
        """

        magnitude = self.electric_field_magnitude(point) * np.cos(self.theta(point))
        magnitude = magnitude * -1 if point[0] < self.position[0] else magnitude
        return magnitude

    def electric_field_y(self, point: List[float]) -> float:
        """
        Calculate the y component of the magnetic field generated by the point charge at a given
        point.

        Args:
            point (List[float]): test point to check.

        Returns:
            float: y component of electric field.
        """

        magnitude = self.electric_field_magnitude(point) * np.sin(self.theta(point))
        magnitude = magnitude * -1 if point[1] < self.position[1] else magnitude
        return magnitude
